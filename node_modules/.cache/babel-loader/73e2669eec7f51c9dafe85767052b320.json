{"ast":null,"code":"import React, { forwardRef, useContext } from 'react';\nimport { IconContext } from '../lib/index.esm.js';\nimport { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\n\nvar renderPathFor = function renderPathFor(weight, color) {\n  switch (weight) {\n    case \"bold\":\n      return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n        d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"24\"\n      }), React.createElement(\"polyline\", {\n        points: \"224 56 128 144 32 56\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"24\"\n      }));\n\n    case \"duotone\":\n      return React.createElement(React.Fragment, null, React.createElement(\"polygon\", {\n        points: \"224 56 128 144 32 56 224 56\",\n        opacity: \"0.2\"\n      }), React.createElement(\"path\", {\n        d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }), React.createElement(\"polyline\", {\n        points: \"224 56 128 144 32 56\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }));\n\n    case \"fill\":\n      return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n        d: \"M231.99121,55.80933q-.00513-.22192-.02246-.44312-.01392-.18054-.03564-.35864c-.01709-.13819-.03858-.27564-.063-.41284-.022-.12427-.0459-.24756-.07325-.36963-.02978-.12989-.064-.25855-.0996-.38721-.03467-.12353-.07081-.24634-.11133-.36743-.04151-.12549-.08789-.24927-.13623-.3728-.04639-.1189-.09375-.23682-.14551-.35279-.0542-.12133-.11279-.24072-.17334-.35986-.05811-.11426-.11719-.2273-.18066-.33814-.06446-.11328-.13282-.2246-.20362-.33544-.07178-.11329-.146-.22461-.22363-.334-.07227-.10156-.147-.20117-.22461-.30029-.08838-.11255-.1792-.22193-.273-.32959-.04394-.05029-.08154-.10376-.12695-.15332-.03858-.042-.08106-.07764-.12012-.11841-.09668-.10107-.19678-.19849-.29834-.29443-.09424-.08887-.189-.17676-.28662-.26026-.09619-.08227-.19531-.15991-.29541-.23755-.10938-.085-.21826-.16919-.33106-.24755-.09765-.06812-.19873-.13135-.29931-.19507-.11914-.0752-.23779-.15015-.35938-.21851-.10693-.05981-.21679-.11377-.32666-.16894-.11963-.05982-.23877-.12012-.36084-.17383-.12109-.05347-.2456-.1001-.37011-.14771-.11475-.0437-.2295-.08838-.3462-.12671-.1333-.04394-.269-.08081-.40527-.11767-.11426-.031-.228-.0625-.34326-.08838-.13574-.03027-.27344-.0542-.41162-.07764-.12256-.02075-.24414-.041-.36719-.05615-.13135-.01611-.26318-.02661-.396-.03613-.13476-.00977-.26953-.01758-.40429-.02051-.05908-.00122-.1167-.00879-.17578-.00879h-192c-.05469,0-.10743.00708-.16211.0083-.14551.00293-.29.011-.43506.022-.12354.009-.2461.0188-.36768.03345-.13281.01611-.26465.03784-.39648.06055-.12891.02221-.25781.04443-.38477.07251-.124.02783-.24609.06152-.36914.09521-.12793.03491-.25586.06958-.38135.11084-.124.04053-.24511.08765-.36718.13428-.11768.04541-.23584.0896-.35108.14014-.127.05566-.25146.11865-.37646.18139-.105.05274-.21.10449-.312.16187-.12549.07007-.24756.147-.36963.22436-.09766.06177-.1958.123-.29053.18921-.11475.07984-.22607.16553-.33691.2522-.09864.07642-.19629.15283-.29053.23364-.09863.08423-.19385.17285-.28906.2627-.10157.09546-.20069.19238-.29737.293-.03906.041-.08154.07666-.12011.11865-.04541.04956-.083.103-.127.15332-.09375.10766-.18457.217-.27295.32959-.07763.09912-.15234.19873-.22461.30029-.07763.10938-.15185.2207-.22363.334-.0708.11084-.13916.22216-.20361.33544-.06348.11084-.12256.22388-.18067.33814-.06054.11914-.11914.23853-.17334.35986-.05175.116-.09912.23389-.1455.35279-.04834.12353-.09473.24731-.13623.3728-.04053.12109-.07666.2439-.11133.36743-.03565.12866-.06983.25732-.09961.38721-.02735.12207-.05127.24536-.07324.36963-.02442.1372-.0459.27465-.063.41284q-.022.17834-.03565.35864-.01758.22156-.02246.44312c-.00146.064-.00976.12622-.00976.19067V192a16.01833,16.01833,0,0,0,16,16h176a16.01833,16.01833,0,0,0,16-16V56C232.001,55.93555,231.99268,55.87329,231.99121,55.80933ZM216.001,192h-176V74.18652l82.59375,75.71094a8.0018,8.0018,0,0,0,10.8125,0l82.59521-75.7124.0083,117.81445Z\"\n      }));\n\n    case \"light\":\n      return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n        d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"12\"\n      }), React.createElement(\"polyline\", {\n        points: \"224 56 128 144 32 56\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"12\"\n      }));\n\n    case \"thin\":\n      return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n        d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"8\"\n      }), React.createElement(\"polyline\", {\n        points: \"224 56 128 144 32 56\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"8\"\n      }));\n\n    case \"regular\":\n      return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n        d: \"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }), React.createElement(\"polyline\", {\n        points: \"224 56 128 144 32 56\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }));\n\n    default:\n      console.error('Unsupported icon weight. Choose from \"thin\", \"light\", \"regular\", \"bold\", \"fill\", or \"duotone\".');\n      return null;\n  }\n};\n\nvar EnvelopeSimple = /*#__PURE__*/forwardRef(function (props, ref) {\n  var color = props.color,\n      size = props.size,\n      weight = props.weight,\n      mirrored = props.mirrored,\n      children = props.children,\n      restProps = _objectWithoutPropertiesLoose(props, [\"color\", \"size\", \"weight\", \"mirrored\", \"children\"]);\n\n  var _useContext = useContext(IconContext),\n      contextColor = _useContext.color,\n      contextSize = _useContext.size,\n      contextWeight = _useContext.weight,\n      contextMirrored = _useContext.mirrored,\n      restContext = _objectWithoutPropertiesLoose(_useContext, [\"color\", \"size\", \"weight\", \"mirrored\"]);\n\n  return React.createElement(\"svg\", Object.assign({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size != null ? size : contextSize,\n    height: size != null ? size : contextSize,\n    fill: color != null ? color : contextColor,\n    viewBox: \"0 0 256 256\",\n    transform: mirrored || contextMirrored ? \"scale(-1, 1)\" : undefined\n  }, restContext, restProps), children, React.createElement(\"rect\", {\n    width: \"256\",\n    height: \"256\",\n    fill: \"none\"\n  }), renderPathFor(weight != null ? weight : contextWeight, color != null ? color : contextColor));\n});\nEnvelopeSimple.displayName = \"EnvelopeSimple\";\nexport default EnvelopeSimple;","map":{"version":3,"sources":["../../src/icons/EnvelopeSimple.tsx"],"names":["renderPathFor","d","fill","stroke","color","strokeLinecap","strokeLinejoin","strokeWidth","points","opacity","console","EnvelopeSimple","forwardRef","size","weight","mirrored","children","restProps","props","contextColor","contextSize","contextWeight","contextMirrored","restContext","useContext","ref","xmlns","width","height","viewBox","transform","undefined"],"mappings":"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","sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef, useContext } from \"react\";\nimport { IconProps, IconContext } from \"../lib\";\n\nconst renderPathFor = (\n  weight: string,\n  color: string\n): React.ReactNode | null => {\n  switch (weight) {\n    case \"bold\":\n      return (\n        <>\n          <path\n            d=\"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          />\n          <polyline\n            points=\"224 56 128 144 32 56\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          />\n        </>\n      );\n    case \"duotone\":\n      return (\n        <>\n          <polygon points=\"224 56 128 144 32 56 224 56\" opacity=\"0.2\" />\n          <path\n            d=\"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n          <polyline\n            points=\"224 56 128 144 32 56\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n        </>\n      );\n    case \"fill\":\n      return (\n        <>\n          <path d=\"M231.99121,55.80933q-.00513-.22192-.02246-.44312-.01392-.18054-.03564-.35864c-.01709-.13819-.03858-.27564-.063-.41284-.022-.12427-.0459-.24756-.07325-.36963-.02978-.12989-.064-.25855-.0996-.38721-.03467-.12353-.07081-.24634-.11133-.36743-.04151-.12549-.08789-.24927-.13623-.3728-.04639-.1189-.09375-.23682-.14551-.35279-.0542-.12133-.11279-.24072-.17334-.35986-.05811-.11426-.11719-.2273-.18066-.33814-.06446-.11328-.13282-.2246-.20362-.33544-.07178-.11329-.146-.22461-.22363-.334-.07227-.10156-.147-.20117-.22461-.30029-.08838-.11255-.1792-.22193-.273-.32959-.04394-.05029-.08154-.10376-.12695-.15332-.03858-.042-.08106-.07764-.12012-.11841-.09668-.10107-.19678-.19849-.29834-.29443-.09424-.08887-.189-.17676-.28662-.26026-.09619-.08227-.19531-.15991-.29541-.23755-.10938-.085-.21826-.16919-.33106-.24755-.09765-.06812-.19873-.13135-.29931-.19507-.11914-.0752-.23779-.15015-.35938-.21851-.10693-.05981-.21679-.11377-.32666-.16894-.11963-.05982-.23877-.12012-.36084-.17383-.12109-.05347-.2456-.1001-.37011-.14771-.11475-.0437-.2295-.08838-.3462-.12671-.1333-.04394-.269-.08081-.40527-.11767-.11426-.031-.228-.0625-.34326-.08838-.13574-.03027-.27344-.0542-.41162-.07764-.12256-.02075-.24414-.041-.36719-.05615-.13135-.01611-.26318-.02661-.396-.03613-.13476-.00977-.26953-.01758-.40429-.02051-.05908-.00122-.1167-.00879-.17578-.00879h-192c-.05469,0-.10743.00708-.16211.0083-.14551.00293-.29.011-.43506.022-.12354.009-.2461.0188-.36768.03345-.13281.01611-.26465.03784-.39648.06055-.12891.02221-.25781.04443-.38477.07251-.124.02783-.24609.06152-.36914.09521-.12793.03491-.25586.06958-.38135.11084-.124.04053-.24511.08765-.36718.13428-.11768.04541-.23584.0896-.35108.14014-.127.05566-.25146.11865-.37646.18139-.105.05274-.21.10449-.312.16187-.12549.07007-.24756.147-.36963.22436-.09766.06177-.1958.123-.29053.18921-.11475.07984-.22607.16553-.33691.2522-.09864.07642-.19629.15283-.29053.23364-.09863.08423-.19385.17285-.28906.2627-.10157.09546-.20069.19238-.29737.293-.03906.041-.08154.07666-.12011.11865-.04541.04956-.083.103-.127.15332-.09375.10766-.18457.217-.27295.32959-.07763.09912-.15234.19873-.22461.30029-.07763.10938-.15185.2207-.22363.334-.0708.11084-.13916.22216-.20361.33544-.06348.11084-.12256.22388-.18067.33814-.06054.11914-.11914.23853-.17334.35986-.05175.116-.09912.23389-.1455.35279-.04834.12353-.09473.24731-.13623.3728-.04053.12109-.07666.2439-.11133.36743-.03565.12866-.06983.25732-.09961.38721-.02735.12207-.05127.24536-.07324.36963-.02442.1372-.0459.27465-.063.41284q-.022.17834-.03565.35864-.01758.22156-.02246.44312c-.00146.064-.00976.12622-.00976.19067V192a16.01833,16.01833,0,0,0,16,16h176a16.01833,16.01833,0,0,0,16-16V56C232.001,55.93555,231.99268,55.87329,231.99121,55.80933ZM216.001,192h-176V74.18652l82.59375,75.71094a8.0018,8.0018,0,0,0,10.8125,0l82.59521-75.7124.0083,117.81445Z\" />\n        </>\n      );\n    case \"light\":\n      return (\n        <>\n          <path\n            d=\"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"12\"\n          />\n          <polyline\n            points=\"224 56 128 144 32 56\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"12\"\n          />\n        </>\n      );\n    case \"thin\":\n      return (\n        <>\n          <path\n            d=\"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"8\"\n          />\n          <polyline\n            points=\"224 56 128 144 32 56\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"8\"\n          />\n        </>\n      );\n    case \"regular\":\n      return (\n        <>\n          <path\n            d=\"M32,56H224a0,0,0,0,1,0,0V192a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56A0,0,0,0,1,32,56Z\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n          <polyline\n            points=\"224 56 128 144 32 56\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n        </>\n      );\n    default:\n      console.error(\n        'Unsupported icon weight. Choose from \"thin\", \"light\", \"regular\", \"bold\", \"fill\", or \"duotone\".'\n      );\n      return null;\n  }\n};\n\nconst EnvelopeSimple = forwardRef<SVGSVGElement, IconProps>((props, ref) => {\n  const { color, size, weight, mirrored, children, ...restProps } = props;\n  const {\n    color: contextColor,\n    size: contextSize,\n    weight: contextWeight,\n    mirrored: contextMirrored,\n    ...restContext\n  } = useContext(IconContext);\n\n  return (\n    <svg\n      ref={ref}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size ?? contextSize}\n      height={size ?? contextSize}\n      fill={color ?? contextColor}\n      viewBox=\"0 0 256 256\"\n      transform={mirrored || contextMirrored ? \"scale(-1, 1)\" : undefined}\n      {...restContext}\n      {...restProps}\n    >\n      {children}\n      <rect width=\"256\" height=\"256\" fill=\"none\" />\n      {renderPathFor(weight ?? contextWeight, color ?? contextColor)}\n    </svg>\n  );\n});\n\nEnvelopeSimple.displayName = \"EnvelopeSimple\";\n\nexport default EnvelopeSimple;\n"]},"metadata":{},"sourceType":"module"}