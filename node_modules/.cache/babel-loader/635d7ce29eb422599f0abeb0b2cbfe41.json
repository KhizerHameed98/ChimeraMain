{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport Switch from \"react-switch\";\nimport \"react-dropdown/style.css\";\nimport \"../../css/check.css\";\nimport Web3 from \"web3\";\nimport Dropdown from \"react-dropdown\";\nimport config from \"../../config\";\nimport Swal from \"sweetalert2\";\nimport axios from \"axios\";\nimport Loader from \"../../partials/Loader\";\n\nconst chimeraContract = require(\"../../contracts/Chimera.json\");\n\nconst SMAV2Contract = require(\"../../contracts/ChimeraMarketAuctionV2.json\");\n\nlet SMAV2, web3, accounts, chimera;\nconst options = [\"Newest\", \"Lowest Price\", \"Highest Price\", \"Oldest\"];\n\nfunction MainCollection(props) {\n  const [checkedState, setCheckedState] = useState({\n    hasListPrice: false,\n    hasOpenOffer: false,\n    ownedByCreator: false,\n    hasSold: false,\n    hasReservePrice: false\n  });\n  const [selected, setSelected] = useState(\"\");\n  const [NFTData, setNFTData] = useState([]);\n  const [OwnerData, setOwnerData] = useState([]);\n  const [TokenId, setTokenId] = useState([]);\n  const [TokenPrice, setTokenPrice] = useState([]);\n  const [ArtistData, setArtistData] = useState([]);\n  const [IsSalePrice, setIsSalePrice] = useState([]);\n  const [IsApprovedByAdmin, setIsApprovedByAdmin] = useState([]);\n  const [BiddingPrice, setBiddingPrice] = useState([]);\n  const [BiddingOrNot, setBiddingOrNot] = useState([]);\n  const [Alldata, setData] = useState([]);\n\n  function _onSelect(option) {\n    console.log(\"You selected \", option.value);\n    setSelected(option);\n  }\n\n  function handlehasListPrice(checked) {\n    setCheckedState({ ...checkedState,\n      hasListPrice: !checkedState.hasListPrice\n    });\n  }\n\n  function handlehasOpenOffer(checked) {\n    setCheckedState({ ...checkedState,\n      hasOpenOffer: !checkedState.hasOpenOffer\n    });\n  }\n\n  function handleownedByCreator(checked) {\n    setCheckedState({ ...checkedState,\n      ownedByCreator: !checkedState.ownedByCreator\n    });\n  }\n\n  function handlehasSold(checked) {\n    setCheckedState({ ...checkedState,\n      hasSold: !checkedState.hasSold\n    });\n  }\n\n  function handlehasReservePrice(checked) {\n    setCheckedState({ ...checkedState,\n      hasReservePrice: !checkedState.hasReservePrice\n    });\n  }\n\n  const [loading, setLoading] = useState(false);\n\n  async function callData() {\n    setLoading(true);\n    web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    accounts = await web3.eth.getAccounts();\n    chimera = await new web3.eth.Contract(chimeraContract.abi, config.Chimera);\n    SMAV2 = await new web3.eth.Contract(SMAV2Contract.abi, config.SMAV2);\n    let nftData = [];\n    let ownerData = [];\n    let tokenId = [];\n    let nftPrice = [];\n    let artist = [];\n    let setSalePrice = [];\n    let isApprovedByAdmin = [];\n    let bidding = [];\n    let biddingBool = [];\n\n    try {\n      let totalSupply = await chimera.methods.totalSupply().call();\n\n      for (let i = 0; i < totalSupply; i++) {\n        let nfts = await chimera.methods.tokenByIndex(i).call();\n        let owner = await chimera.methods.ownerOf(nfts).call();\n\n        if (owner === accounts[0]) {\n          tokenId.push(nfts);\n          let res = await axios.get(`http://localhost:5000/file/${nfts}`);\n          nftData.push(res.data[0]);\n          let artistVar = await axios.get(`http://localhost:5000/api/users/${res.data[0].Artist}`);\n          artist.push(artistVar.data);\n          let ownerVar = await axios.get(`http://localhost:5000/api/users/${res.data[0].Owner}`);\n          ownerData.push(ownerVar.data);\n          let confirmed = await SMAV2.methods.isTokenConfirmedByAdmin(nfts).call();\n          isApprovedByAdmin.push(confirmed);\n          let price = await SMAV2.methods.tokenPrice(config.Chimera, nfts).call();\n          nftPrice.push(price);\n\n          if (price === \"0\") {\n            setSalePrice.push(false);\n          } else {\n            setSalePrice.push(true);\n          }\n\n          let bid = await SMAV2.methods.currentBidDetailsOfToken(config.Chimera, nfts).call();\n          bidding.push(bid);\n\n          if (bid[0] === \"0\") {\n            biddingBool.push(false);\n          } else {\n            biddingBool.push(true);\n          }\n        }\n      }\n\n      Promise.all([nftData, ownerData, tokenId, nftPrice, artist, setSalePrice, isApprovedByAdmin, bidding, biddingBool]).then(res => {\n        console.log(res);\n        let d = [];\n        setNFTData(res[0]);\n        setOwnerData(res[1]);\n        setTokenId(res[2]);\n        setTokenPrice(res[3]);\n        setArtistData(res[4]);\n        setIsSalePrice(res[5]);\n        setIsApprovedByAdmin(res[6]);\n        setBiddingPrice(res[7]);\n        setBiddingOrNot(res[8]);\n        setLoading(false);\n      });\n    } catch (error) {\n      console.log(error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"Something went wrong!\"\n      });\n    }\n  }\n\n  useEffect(() => {\n    callData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\n\nexport default MainCollection;","map":{"version":3,"sources":["/home/khizer/Documents/AllData/ChimeraComplete/chimeraMain/src/partials/Collection/MainCollection.js"],"names":["React","useState","useEffect","Switch","Web3","Dropdown","config","Swal","axios","Loader","chimeraContract","require","SMAV2Contract","SMAV2","web3","accounts","chimera","options","MainCollection","props","checkedState","setCheckedState","hasListPrice","hasOpenOffer","ownedByCreator","hasSold","hasReservePrice","selected","setSelected","NFTData","setNFTData","OwnerData","setOwnerData","TokenId","setTokenId","TokenPrice","setTokenPrice","ArtistData","setArtistData","IsSalePrice","setIsSalePrice","IsApprovedByAdmin","setIsApprovedByAdmin","BiddingPrice","setBiddingPrice","BiddingOrNot","setBiddingOrNot","Alldata","setData","_onSelect","option","console","log","value","handlehasListPrice","checked","handlehasOpenOffer","handleownedByCreator","handlehasSold","handlehasReservePrice","loading","setLoading","callData","window","ethereum","enable","eth","getAccounts","Contract","abi","Chimera","nftData","ownerData","tokenId","nftPrice","artist","setSalePrice","isApprovedByAdmin","bidding","biddingBool","totalSupply","methods","call","i","nfts","tokenByIndex","owner","ownerOf","push","res","get","data","artistVar","Artist","ownerVar","Owner","confirmed","isTokenConfirmedByAdmin","price","tokenPrice","bid","currentBidDetailsOfToken","Promise","all","then","d","error","fire","icon","title","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Switch from \"react-switch\";\nimport \"react-dropdown/style.css\";\nimport \"../../css/check.css\";\nimport Web3 from \"web3\";\nimport Dropdown from \"react-dropdown\";\nimport config from \"../../config\";\nimport Swal from \"sweetalert2\";\nimport axios from \"axios\";\n\nimport Loader from \"../../partials/Loader\";\nconst chimeraContract = require(\"../../contracts/Chimera.json\");\nconst SMAV2Contract = require(\"../../contracts/ChimeraMarketAuctionV2.json\");\nlet SMAV2, web3, accounts, chimera;\n\nconst options = [\"Newest\", \"Lowest Price\", \"Highest Price\", \"Oldest\"];\nfunction MainCollection(props) {\n  const [checkedState, setCheckedState] = useState({\n    hasListPrice: false,\n    hasOpenOffer: false,\n    ownedByCreator: false,\n    hasSold: false,\n    hasReservePrice: false,\n  });\n  const [selected, setSelected] = useState(\"\");\n\n  const [NFTData, setNFTData] = useState([]);\n  const [OwnerData, setOwnerData] = useState([]);\n  const [TokenId, setTokenId] = useState([]);\n  const [TokenPrice, setTokenPrice] = useState([]);\n  const [ArtistData, setArtistData] = useState([]);\n  const [IsSalePrice, setIsSalePrice] = useState([]);\n  const [IsApprovedByAdmin, setIsApprovedByAdmin] = useState([]);\n  const [BiddingPrice, setBiddingPrice] = useState([]);\n  const [BiddingOrNot, setBiddingOrNot] = useState([]);\n  const [Alldata, setData] = useState([]);\n  function _onSelect(option) {\n    console.log(\"You selected \", option.value);\n    setSelected(option);\n  }\n\n  function handlehasListPrice(checked) {\n    setCheckedState({\n      ...checkedState,\n      hasListPrice: !checkedState.hasListPrice,\n    });\n  }\n  function handlehasOpenOffer(checked) {\n    setCheckedState({\n      ...checkedState,\n      hasOpenOffer: !checkedState.hasOpenOffer,\n    });\n  }\n  function handleownedByCreator(checked) {\n    setCheckedState({\n      ...checkedState,\n      ownedByCreator: !checkedState.ownedByCreator,\n    });\n  }\n  function handlehasSold(checked) {\n    setCheckedState({\n      ...checkedState,\n      hasSold: !checkedState.hasSold,\n    });\n  }\n  function handlehasReservePrice(checked) {\n    setCheckedState({\n      ...checkedState,\n      hasReservePrice: !checkedState.hasReservePrice,\n    });\n  }\n  const [loading, setLoading] = useState(false);\n  async function callData() {\n    setLoading(true);\n    web3 = new Web3(window.ethereum);\n    window.ethereum.enable();\n    accounts = await web3.eth.getAccounts();\n    chimera = await new web3.eth.Contract(chimeraContract.abi, config.Chimera);\n    SMAV2 = await new web3.eth.Contract(SMAV2Contract.abi, config.SMAV2);\n\n    let nftData = [];\n    let ownerData = [];\n    let tokenId = [];\n    let nftPrice = [];\n    let artist = [];\n    let setSalePrice = [];\n    let isApprovedByAdmin = [];\n    let bidding = [];\n    let biddingBool = [];\n    try {\n      let totalSupply = await chimera.methods.totalSupply().call();\n      for (let i = 0; i < totalSupply; i++) {\n        let nfts = await chimera.methods.tokenByIndex(i).call();\n        let owner = await chimera.methods.ownerOf(nfts).call();\n        if (owner === accounts[0]) {\n          tokenId.push(nfts);\n          let res = await axios.get(`http://localhost:5000/file/${nfts}`);\n          nftData.push(res.data[0]);\n\n          let artistVar = await axios.get(\n            `http://localhost:5000/api/users/${res.data[0].Artist}`\n          );\n          artist.push(artistVar.data);\n\n          let ownerVar = await axios.get(\n            `http://localhost:5000/api/users/${res.data[0].Owner}`\n          );\n          ownerData.push(ownerVar.data);\n          let confirmed = await SMAV2.methods\n            .isTokenConfirmedByAdmin(nfts)\n            .call();\n          isApprovedByAdmin.push(confirmed);\n\n          let price = await SMAV2.methods\n            .tokenPrice(config.Chimera, nfts)\n            .call();\n          nftPrice.push(price);\n          if (price === \"0\") {\n            setSalePrice.push(false);\n          } else {\n            setSalePrice.push(true);\n          }\n          let bid = await SMAV2.methods\n            .currentBidDetailsOfToken(config.Chimera, nfts)\n            .call();\n          bidding.push(bid);\n          if (bid[0] === \"0\") {\n            biddingBool.push(false);\n          } else {\n            biddingBool.push(true);\n          }\n        }\n      }\n      Promise.all([\n        nftData,\n        ownerData,\n        tokenId,\n        nftPrice,\n        artist,\n        setSalePrice,\n        isApprovedByAdmin,\n        bidding,\n        biddingBool,\n      ]).then((res) => {\n        console.log(res);\n        let d = [];\n        setNFTData(res[0]);\n        setOwnerData(res[1]);\n        setTokenId(res[2]);\n        setTokenPrice(res[3]);\n        setArtistData(res[4]);\n        setIsSalePrice(res[5]);\n        setIsApprovedByAdmin(res[6]);\n        setBiddingPrice(res[7]);\n        setBiddingOrNot(res[8]);\n\n        setLoading(false);\n      });\n    } catch (error) {\n      console.log(error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"Something went wrong!\",\n      });\n    }\n  }\n\n  useEffect(() => {\n    callData();\n  }, []);\n\n  return (\n   <>\n   </>\n  );\n}\nexport default MainCollection;\n"]},"metadata":{},"sourceType":"module"}