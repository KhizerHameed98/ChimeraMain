{"ast":null,"code":"import React, { forwardRef, useContext } from 'react';\nimport { IconContext } from '../lib/index.esm.js';\nimport { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\n\nvar renderPathFor = function renderPathFor(weight, color) {\n  switch (weight) {\n    case \"bold\":\n      return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n        points: \"152 56 152 104 200 104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"24\"\n      }), React.createElement(\"line\", {\n        x1: \"208\",\n        y1: \"48\",\n        x2: \"152\",\n        y2: \"104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"24\"\n      }), React.createElement(\"polyline\", {\n        points: \"56 152 104 152 104 200\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"24\"\n      }), React.createElement(\"line\", {\n        x1: \"48\",\n        y1: \"208\",\n        x2: \"104\",\n        y2: \"152\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"24\"\n      }));\n\n    case \"duotone\":\n      return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n        points: \"152 56 152 104 200 104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }), React.createElement(\"line\", {\n        x1: \"208\",\n        y1: \"48\",\n        x2: \"152\",\n        y2: \"104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }), React.createElement(\"polyline\", {\n        points: \"56 152 104 152 104 200\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }), React.createElement(\"line\", {\n        x1: \"48\",\n        y1: \"208\",\n        x2: \"104\",\n        y2: \"152\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }));\n\n    case \"fill\":\n      return React.createElement(React.Fragment, null, React.createElement(\"g\", null, React.createElement(\"path\", {\n        d: \"M213.65723,42.34277a8.003,8.003,0,0,0-11.31446,0L160,84.68555V56a8,8,0,0,0-16,0v47.99487q0,.39918.04.79712c.01074.10718.03125.21118.0459.31714.021.15259.03955.30566.06933.457.02491.12525.05957.24634.09034.36939.03271.13037.06152.26123.10058.39013.03662.12073.082.23706.124.35523.04541.12866.08838.25781.14063.38428.04492.10791.09766.21118.147.31665.06153.132.12061.26464.18994.39379.05176.09693.11133.18873.167.28309.07666.13024.15087.26147.23584.38806.0664.09887.14062.19116.21093.28686.084.11438.16407.23084.25537.34156.11622.14111.2417.27368.36719.40649.0542.05762.10205.11914.15869.17554.0542.05432.11377.10034.16895.15283.13525.12756.27.25561.41406.37353.10645.08765.21826.16431.32813.24561.10009.074.19726.15173.30078.22119.12207.08154.248.15259.37353.22681.09912.059.19629.12146.29834.17627.124.0664.25147.1228.37842.18237.11035.05188.21875.10706.332.154.1211.05005.24463.0907.36768.13465.12353.04431.2456.09167.37207.13.12158.03687.24512.064.36816.09473.13037.033.25879.06933.3916.0957.14063.02783.28321.04443.42481.0647.1167.01672.231.03882.34912.05041.26221.02588.52588.03992.78955.03992h48a8,8,0,0,0,0-16H171.31445l42.34278-42.34277A8.00122,8.00122,0,0,0,213.65723,42.34277Z\"\n      }), React.createElement(\"path\", {\n        d: \"M111.96,151.208c-.01074-.10718-.03125-.21118-.0459-.31714-.021-.15259-.03955-.30566-.06933-.457-.02491-.12525-.05957-.24634-.09034-.36939-.03271-.13037-.06152-.26123-.10058-.39013-.03662-.12073-.082-.23706-.124-.35523-.04541-.12866-.08838-.25781-.14063-.38428-.04492-.10791-.09766-.21118-.147-.31665-.06153-.13195-.12061-.26464-.18994-.39379-.05176-.09693-.11133-.18873-.167-.28309-.07666-.13024-.15087-.26147-.23584-.38806-.0664-.09887-.14062-.19116-.21093-.28686-.084-.11438-.16407-.23084-.25537-.34156-.11622-.14111-.2417-.27368-.36719-.40649-.0542-.05762-.10205-.11914-.15869-.17554-.05323-.05334-.11133-.09851-.166-.15-.13623-.12879-.27246-.25769-.417-.37671-.10449-.08582-.21436-.16077-.32178-.24048-.10254-.07593-.20166-.15539-.3081-.22644-.11817-.0791-.24073-.148-.36231-.22-.10351-.06177-.2041-.12671-.31055-.18359-.11865-.06324-.24023-.117-.36084-.17383-.11669-.05518-.23144-.11328-.35107-.16284-.1123-.04663-.22754-.084-.3418-.12525-.13281-.04785-.26367-.09839-.39941-.1394-.10938-.03308-.2207-.057-.33106-.08521-.14257-.0365-.2832-.07592-.42822-.10461-.12158-.024-.24414-.0376-.3667-.05591-.13574-.02039-.27-.04553-.4082-.059-.20215-.01977-.40479-.02612-.60742-.03064C104.11768,144.00757,104.05957,144,104,144H56a8,8,0,0,0,0,16H84.68555L42.34277,202.34277a8.00053,8.00053,0,0,0,11.31446,11.31446L96,171.31445V200a8,8,0,0,0,16,0V152.00513Q112,151.606,111.96,151.208Z\"\n      })));\n\n    case \"light\":\n      return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n        points: \"152 56 152 104 200 104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"12\"\n      }), React.createElement(\"line\", {\n        x1: \"208\",\n        y1: \"48\",\n        x2: \"152\",\n        y2: \"104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"12\"\n      }), React.createElement(\"polyline\", {\n        points: \"56 152 104 152 104 200\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"12\"\n      }), React.createElement(\"line\", {\n        x1: \"48\",\n        y1: \"208\",\n        x2: \"104\",\n        y2: \"152\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"12\"\n      }));\n\n    case \"thin\":\n      return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n        points: \"152 56 152 104 200 104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"8\"\n      }), React.createElement(\"line\", {\n        x1: \"208\",\n        y1: \"48\",\n        x2: \"152\",\n        y2: \"104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"8\"\n      }), React.createElement(\"polyline\", {\n        points: \"56 152 104 152 104 200\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"8\"\n      }), React.createElement(\"line\", {\n        x1: \"48\",\n        y1: \"208\",\n        x2: \"104\",\n        y2: \"152\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"8\"\n      }));\n\n    case \"regular\":\n      return React.createElement(React.Fragment, null, React.createElement(\"polyline\", {\n        points: \"152 56 152 104 200 104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }), React.createElement(\"line\", {\n        x1: \"208\",\n        y1: \"48\",\n        x2: \"152\",\n        y2: \"104\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }), React.createElement(\"polyline\", {\n        points: \"56 152 104 152 104 200\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }), React.createElement(\"line\", {\n        x1: \"48\",\n        y1: \"208\",\n        x2: \"104\",\n        y2: \"152\",\n        fill: \"none\",\n        stroke: color,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: \"16\"\n      }));\n\n    default:\n      console.error('Unsupported icon weight. Choose from \"thin\", \"light\", \"regular\", \"bold\", \"fill\", or \"duotone\".');\n      return null;\n  }\n};\n\nvar ArrowsInSimple = /*#__PURE__*/forwardRef(function (props, ref) {\n  var color = props.color,\n      size = props.size,\n      weight = props.weight,\n      mirrored = props.mirrored,\n      children = props.children,\n      restProps = _objectWithoutPropertiesLoose(props, [\"color\", \"size\", \"weight\", \"mirrored\", \"children\"]);\n\n  var _useContext = useContext(IconContext),\n      contextColor = _useContext.color,\n      contextSize = _useContext.size,\n      contextWeight = _useContext.weight,\n      contextMirrored = _useContext.mirrored,\n      restContext = _objectWithoutPropertiesLoose(_useContext, [\"color\", \"size\", \"weight\", \"mirrored\"]);\n\n  return React.createElement(\"svg\", Object.assign({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size != null ? size : contextSize,\n    height: size != null ? size : contextSize,\n    fill: color != null ? color : contextColor,\n    viewBox: \"0 0 256 256\",\n    transform: mirrored || contextMirrored ? \"scale(-1, 1)\" : undefined\n  }, restContext, restProps), children, React.createElement(\"rect\", {\n    width: \"256\",\n    height: \"256\",\n    fill: \"none\"\n  }), renderPathFor(weight != null ? weight : contextWeight, color != null ? color : contextColor));\n});\nArrowsInSimple.displayName = \"ArrowsInSimple\";\nexport default ArrowsInSimple;","map":{"version":3,"sources":["../../src/icons/ArrowsInSimple.tsx"],"names":["renderPathFor","points","fill","stroke","color","strokeLinecap","strokeLinejoin","strokeWidth","x1","y1","x2","y2","d","console","ArrowsInSimple","forwardRef","size","weight","mirrored","children","restProps","props","contextColor","contextSize","contextWeight","contextMirrored","restContext","useContext","ref","xmlns","width","height","viewBox","transform","undefined"],"mappings":"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","sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef, useContext } from \"react\";\nimport { IconProps, IconContext } from \"../lib\";\n\nconst renderPathFor = (\n  weight: string,\n  color: string\n): React.ReactNode | null => {\n  switch (weight) {\n    case \"bold\":\n      return (\n        <>\n          <polyline\n            points=\"152 56 152 104 200 104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          />\n          <line\n            x1=\"208\"\n            y1=\"48\"\n            x2=\"152\"\n            y2=\"104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          />\n          <polyline\n            points=\"56 152 104 152 104 200\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          />\n          <line\n            x1=\"48\"\n            y1=\"208\"\n            x2=\"104\"\n            y2=\"152\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          />\n        </>\n      );\n    case \"duotone\":\n      return (\n        <>\n          <polyline\n            points=\"152 56 152 104 200 104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n          <line\n            x1=\"208\"\n            y1=\"48\"\n            x2=\"152\"\n            y2=\"104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n          <polyline\n            points=\"56 152 104 152 104 200\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n          <line\n            x1=\"48\"\n            y1=\"208\"\n            x2=\"104\"\n            y2=\"152\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n        </>\n      );\n    case \"fill\":\n      return (\n        <>\n          <g>\n            <path d=\"M213.65723,42.34277a8.003,8.003,0,0,0-11.31446,0L160,84.68555V56a8,8,0,0,0-16,0v47.99487q0,.39918.04.79712c.01074.10718.03125.21118.0459.31714.021.15259.03955.30566.06933.457.02491.12525.05957.24634.09034.36939.03271.13037.06152.26123.10058.39013.03662.12073.082.23706.124.35523.04541.12866.08838.25781.14063.38428.04492.10791.09766.21118.147.31665.06153.132.12061.26464.18994.39379.05176.09693.11133.18873.167.28309.07666.13024.15087.26147.23584.38806.0664.09887.14062.19116.21093.28686.084.11438.16407.23084.25537.34156.11622.14111.2417.27368.36719.40649.0542.05762.10205.11914.15869.17554.0542.05432.11377.10034.16895.15283.13525.12756.27.25561.41406.37353.10645.08765.21826.16431.32813.24561.10009.074.19726.15173.30078.22119.12207.08154.248.15259.37353.22681.09912.059.19629.12146.29834.17627.124.0664.25147.1228.37842.18237.11035.05188.21875.10706.332.154.1211.05005.24463.0907.36768.13465.12353.04431.2456.09167.37207.13.12158.03687.24512.064.36816.09473.13037.033.25879.06933.3916.0957.14063.02783.28321.04443.42481.0647.1167.01672.231.03882.34912.05041.26221.02588.52588.03992.78955.03992h48a8,8,0,0,0,0-16H171.31445l42.34278-42.34277A8.00122,8.00122,0,0,0,213.65723,42.34277Z\" />\n            <path d=\"M111.96,151.208c-.01074-.10718-.03125-.21118-.0459-.31714-.021-.15259-.03955-.30566-.06933-.457-.02491-.12525-.05957-.24634-.09034-.36939-.03271-.13037-.06152-.26123-.10058-.39013-.03662-.12073-.082-.23706-.124-.35523-.04541-.12866-.08838-.25781-.14063-.38428-.04492-.10791-.09766-.21118-.147-.31665-.06153-.13195-.12061-.26464-.18994-.39379-.05176-.09693-.11133-.18873-.167-.28309-.07666-.13024-.15087-.26147-.23584-.38806-.0664-.09887-.14062-.19116-.21093-.28686-.084-.11438-.16407-.23084-.25537-.34156-.11622-.14111-.2417-.27368-.36719-.40649-.0542-.05762-.10205-.11914-.15869-.17554-.05323-.05334-.11133-.09851-.166-.15-.13623-.12879-.27246-.25769-.417-.37671-.10449-.08582-.21436-.16077-.32178-.24048-.10254-.07593-.20166-.15539-.3081-.22644-.11817-.0791-.24073-.148-.36231-.22-.10351-.06177-.2041-.12671-.31055-.18359-.11865-.06324-.24023-.117-.36084-.17383-.11669-.05518-.23144-.11328-.35107-.16284-.1123-.04663-.22754-.084-.3418-.12525-.13281-.04785-.26367-.09839-.39941-.1394-.10938-.03308-.2207-.057-.33106-.08521-.14257-.0365-.2832-.07592-.42822-.10461-.12158-.024-.24414-.0376-.3667-.05591-.13574-.02039-.27-.04553-.4082-.059-.20215-.01977-.40479-.02612-.60742-.03064C104.11768,144.00757,104.05957,144,104,144H56a8,8,0,0,0,0,16H84.68555L42.34277,202.34277a8.00053,8.00053,0,0,0,11.31446,11.31446L96,171.31445V200a8,8,0,0,0,16,0V152.00513Q112,151.606,111.96,151.208Z\" />\n          </g>\n        </>\n      );\n    case \"light\":\n      return (\n        <>\n          <polyline\n            points=\"152 56 152 104 200 104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"12\"\n          />\n          <line\n            x1=\"208\"\n            y1=\"48\"\n            x2=\"152\"\n            y2=\"104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"12\"\n          />\n          <polyline\n            points=\"56 152 104 152 104 200\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"12\"\n          />\n          <line\n            x1=\"48\"\n            y1=\"208\"\n            x2=\"104\"\n            y2=\"152\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"12\"\n          />\n        </>\n      );\n    case \"thin\":\n      return (\n        <>\n          <polyline\n            points=\"152 56 152 104 200 104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"8\"\n          />\n          <line\n            x1=\"208\"\n            y1=\"48\"\n            x2=\"152\"\n            y2=\"104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"8\"\n          />\n          <polyline\n            points=\"56 152 104 152 104 200\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"8\"\n          />\n          <line\n            x1=\"48\"\n            y1=\"208\"\n            x2=\"104\"\n            y2=\"152\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"8\"\n          />\n        </>\n      );\n    case \"regular\":\n      return (\n        <>\n          <polyline\n            points=\"152 56 152 104 200 104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n          <line\n            x1=\"208\"\n            y1=\"48\"\n            x2=\"152\"\n            y2=\"104\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n          <polyline\n            points=\"56 152 104 152 104 200\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n          <line\n            x1=\"48\"\n            y1=\"208\"\n            x2=\"104\"\n            y2=\"152\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n        </>\n      );\n    default:\n      console.error(\n        'Unsupported icon weight. Choose from \"thin\", \"light\", \"regular\", \"bold\", \"fill\", or \"duotone\".'\n      );\n      return null;\n  }\n};\n\nconst ArrowsInSimple = forwardRef<SVGSVGElement, IconProps>((props, ref) => {\n  const { color, size, weight, mirrored, children, ...restProps } = props;\n  const {\n    color: contextColor,\n    size: contextSize,\n    weight: contextWeight,\n    mirrored: contextMirrored,\n    ...restContext\n  } = useContext(IconContext);\n\n  return (\n    <svg\n      ref={ref}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size ?? contextSize}\n      height={size ?? contextSize}\n      fill={color ?? contextColor}\n      viewBox=\"0 0 256 256\"\n      transform={mirrored || contextMirrored ? \"scale(-1, 1)\" : undefined}\n      {...restContext}\n      {...restProps}\n    >\n      {children}\n      <rect width=\"256\" height=\"256\" fill=\"none\" />\n      {renderPathFor(weight ?? contextWeight, color ?? contextColor)}\n    </svg>\n  );\n});\n\nArrowsInSimple.displayName = \"ArrowsInSimple\";\n\nexport default ArrowsInSimple;\n"]},"metadata":{},"sourceType":"module"}