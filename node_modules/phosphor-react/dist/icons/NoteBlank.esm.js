import React, { forwardRef, useContext } from 'react';
import { IconContext } from '../lib/index.esm.js';
import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';

var renderPathFor = function renderPathFor(weight, color) {
  switch (weight) {
    case "bold":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M156.68629,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.68629a8,8,0,0,1-2.34315,5.65686l-51.3137,51.3137A8,8,0,0,1,156.68629,216Z",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("polyline", {
        points: "215.284 155.992 156 155.992 156 215.275",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }));

    case "duotone":
      return React.createElement(React.Fragment, null, React.createElement("polygon", {
        points: "216 159.992 160 159.992 160 216 216 159.992",
        opacity: "0.2"
      }), React.createElement("path", {
        d: "M156.68629,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.68629a8,8,0,0,1-2.34315,5.65686l-51.3137,51.3137A8,8,0,0,1,156.68629,216Z",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("polyline", {
        points: "215.279 159.992 160 159.992 160 215.275",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }));

    case "fill":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M208,32H48A16.01833,16.01833,0,0,0,32,48V208a16.01833,16.01833,0,0,0,16,16H156.68652A15.89354,15.89354,0,0,0,168,219.31348L219.31348,168A15.89557,15.89557,0,0,0,224,156.68652V48A16.01833,16.01833,0,0,0,208,32ZM160,204.68652V159.99219h44.69458Z"
      }));

    case "light":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M156.68629,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.68629a8,8,0,0,1-2.34315,5.65686l-51.3137,51.3137A8,8,0,0,1,156.68629,216Z",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("polyline", {
        points: "215.279 159.992 160 159.992 160 215.278",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }));

    case "thin":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M156.68629,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.68629a8,8,0,0,1-2.34315,5.65686l-51.3137,51.3137A8,8,0,0,1,156.68629,216Z",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("polyline", {
        points: "215.279 159.992 160 159.992 160 215.272",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }));

    case "regular":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M156.68629,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.68629a8,8,0,0,1-2.34315,5.65686l-51.3137,51.3137A8,8,0,0,1,156.68629,216Z",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("polyline", {
        points: "215.281 159.992 160 159.992 160 215.272",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }));

    default:
      console.error('Unsupported icon weight. Choose from "thin", "light", "regular", "bold", "fill", or "duotone".');
      return null;
  }
};

var NoteBlank = /*#__PURE__*/forwardRef(function (props, ref) {
  var color = props.color,
      size = props.size,
      weight = props.weight,
      mirrored = props.mirrored,
      children = props.children,
      restProps = _objectWithoutPropertiesLoose(props, ["color", "size", "weight", "mirrored", "children"]);

  var _useContext = useContext(IconContext),
      contextColor = _useContext.color,
      contextSize = _useContext.size,
      contextWeight = _useContext.weight,
      contextMirrored = _useContext.mirrored,
      restContext = _objectWithoutPropertiesLoose(_useContext, ["color", "size", "weight", "mirrored"]);

  return React.createElement("svg", Object.assign({
    ref: ref,
    xmlns: "http://www.w3.org/2000/svg",
    width: size != null ? size : contextSize,
    height: size != null ? size : contextSize,
    fill: color != null ? color : contextColor,
    viewBox: "0 0 256 256",
    transform: mirrored || contextMirrored ? "scale(-1, 1)" : undefined
  }, restContext, restProps), children, React.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), renderPathFor(weight != null ? weight : contextWeight, color != null ? color : contextColor));
});
NoteBlank.displayName = "NoteBlank";

export default NoteBlank;
//# sourceMappingURL=NoteBlank.esm.js.map
