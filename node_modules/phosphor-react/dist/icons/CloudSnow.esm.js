import React, { forwardRef, useContext } from 'react';
import { IconContext } from '../lib/index.esm.js';
import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';

var renderPathFor = function renderPathFor(weight, color) {
  switch (weight) {
    case "bold":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M88,96a68,68,0,1,1,68,68H76A44,44,0,1,1,90.30583,78.37792",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("circle", {
        cx: "160",
        cy: "216",
        r: "16"
      }), React.createElement("circle", {
        cx: "112",
        cy: "216",
        r: "16"
      }), React.createElement("circle", {
        cx: "64",
        cy: "216",
        r: "16"
      }));

    case "duotone":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M88,92a68,68,0,1,1,68,68H76A44,44,0,1,1,90.30583,74.37792",
        opacity: "0.2"
      }), React.createElement("path", {
        d: "M88,92a68,68,0,1,1,68,68H76A44,44,0,1,1,90.30583,74.37792",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("circle", {
        cx: "76",
        cy: "196",
        r: "12"
      }), React.createElement("circle", {
        cx: "116",
        cy: "212",
        r: "12"
      }), React.createElement("circle", {
        cx: "164",
        cy: "196",
        r: "12"
      }), React.createElement("circle", {
        cx: "68",
        cy: "236",
        r: "12"
      }), React.createElement("circle", {
        cx: "156",
        cy: "236",
        r: "12"
      }));

    case "fill":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M175.99512,196a12,12,0,1,1-12-12A12.01375,12.01375,0,0,1,175.99512,196Zm-100-12a12,12,0,1,0,12,12A12.01375,12.01375,0,0,0,75.99512,184Zm40,16a12,12,0,1,0,12,12A12.01375,12.01375,0,0,0,115.99512,200Zm-48,24a12,12,0,1,0,12,12A12.01375,12.01375,0,0,0,67.99512,224Zm88,0a12,12,0,1,0,12,12A12.01375,12.01375,0,0,0,155.99512,224Zm0-208A76.1302,76.1302,0,0,0,85.03931,64.76562l-.007.01758A75.62312,75.62312,0,0,0,79.99512,92a8,8,0,0,1-16,0,91.68713,91.68713,0,0,1,4.16967-27.40967A52.0014,52.0014,0,0,0,75.99512,168h80a76,76,0,0,0,0-152Z"
      }));

    case "light":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M88,92a68,68,0,1,1,68,68H76A44,44,0,1,1,90.30583,74.37792",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("circle", {
        cx: "76",
        cy: "196",
        r: "10"
      }), React.createElement("circle", {
        cx: "116",
        cy: "212",
        r: "10"
      }), React.createElement("circle", {
        cx: "164",
        cy: "196",
        r: "10"
      }), React.createElement("circle", {
        cx: "68",
        cy: "236",
        r: "10"
      }), React.createElement("circle", {
        cx: "156",
        cy: "236",
        r: "10"
      }));

    case "thin":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M88,92a68,68,0,1,1,68,68H76A44,44,0,1,1,90.30583,74.37792",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("circle", {
        cx: "76",
        cy: "196",
        r: "8"
      }), React.createElement("circle", {
        cx: "116",
        cy: "212",
        r: "8"
      }), React.createElement("circle", {
        cx: "164",
        cy: "196",
        r: "8"
      }), React.createElement("circle", {
        cx: "68",
        cy: "236",
        r: "8"
      }), React.createElement("circle", {
        cx: "156",
        cy: "236",
        r: "8"
      }));

    case "regular":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M88,92a68,68,0,1,1,68,68H76A44,44,0,1,1,90.30583,74.37792",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("circle", {
        cx: "76",
        cy: "196",
        r: "12"
      }), React.createElement("circle", {
        cx: "116",
        cy: "212",
        r: "12"
      }), React.createElement("circle", {
        cx: "164",
        cy: "196",
        r: "12"
      }), React.createElement("circle", {
        cx: "68",
        cy: "236",
        r: "12"
      }), React.createElement("circle", {
        cx: "156",
        cy: "236",
        r: "12"
      }));

    default:
      console.error('Unsupported icon weight. Choose from "thin", "light", "regular", "bold", "fill", or "duotone".');
      return null;
  }
};

var CloudSnow = /*#__PURE__*/forwardRef(function (props, ref) {
  var color = props.color,
      size = props.size,
      weight = props.weight,
      mirrored = props.mirrored,
      children = props.children,
      restProps = _objectWithoutPropertiesLoose(props, ["color", "size", "weight", "mirrored", "children"]);

  var _useContext = useContext(IconContext),
      contextColor = _useContext.color,
      contextSize = _useContext.size,
      contextWeight = _useContext.weight,
      contextMirrored = _useContext.mirrored,
      restContext = _objectWithoutPropertiesLoose(_useContext, ["color", "size", "weight", "mirrored"]);

  return React.createElement("svg", Object.assign({
    ref: ref,
    xmlns: "http://www.w3.org/2000/svg",
    width: size != null ? size : contextSize,
    height: size != null ? size : contextSize,
    fill: color != null ? color : contextColor,
    viewBox: "0 0 256 256",
    transform: mirrored || contextMirrored ? "scale(-1, 1)" : undefined
  }, restContext, restProps), children, React.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), renderPathFor(weight != null ? weight : contextWeight, color != null ? color : contextColor));
});
CloudSnow.displayName = "CloudSnow";

export default CloudSnow;
//# sourceMappingURL=CloudSnow.esm.js.map
