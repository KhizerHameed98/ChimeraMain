import React, { forwardRef, useContext } from 'react';
import { IconContext } from '../lib/index.esm.js';
import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';

var renderPathFor = function renderPathFor(weight, color) {
  switch (weight) {
    case "bold":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "40",
        y1: "128",
        x2: "216",
        y2: "128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("path", {
        d: "M171.73144,79.99989C169.29943,62.00014,150.648,48,128,48c-24.30053,0-44,16.11775-44,36a32.40178,32.40178,0,0,0,2.00532,12.00253",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("path", {
        d: "M153.03855,127.9992C171.72987,135.814,184,146.83949,184,164c0,28-25.072,44-56,44-25.63327,0-47.244-13.53195-53.892-32",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }));

    case "duotone":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "40",
        y1: "128",
        x2: "216",
        y2: "128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("path", {
        d: "M171.73144,79.99989C169.29943,62.00014,150.648,48,128,48c-24.30053,0-44,16.11775-44,36a32.40178,32.40178,0,0,0,2.00532,12.00253",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("path", {
        d: "M153.03855,127.9992C171.72987,135.814,184,146.83949,184,164c0,28-25.072,44-56,44-25.63327,0-47.244-13.53195-53.892-32",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }));

    case "fill":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M224,128a7.99977,7.99977,0,0,1-8,8H180.28784C188.071,143.907,192,153.26367,192,164c0,30.6167-26.31787,52-64,52-28.25928,0-53.51562-15.33447-61.41943-37.29053a8.00013,8.00013,0,0,1,15.05468-5.41894C87.2959,189.0166,106.36182,200,128,200c23.89209,0,48-11.13135,48-36,0-7.45044-2.60071-18.385-24.61145-28H40a8,8,0,0,1,0-16H152.95728c.03759-.00049.075,0,.11267,0H216A7.99977,7.99977,0,0,1,224,128ZM86.00781,104.00439a8.00453,8.00453,0,0,0,7.43946-10.9375A24.60019,24.60019,0,0,1,92,84c0-15.43945,16.14941-28,36-28,18.17725,0,33.90381,11.0127,35.80371,25.07129a7.99979,7.99979,0,0,0,15.85547-2.14258C176.66064,56.73584,154.45215,40,128,40,99.32715,40,76,59.73828,76,84a40.124,40.124,0,0,0,2.56348,14.938A8.00176,8.00176,0,0,0,86.00781,104.00439Z"
      }));

    case "light":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "40",
        y1: "128",
        x2: "216",
        y2: "128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("path", {
        d: "M171.73144,79.99989C169.29943,62.00014,150.648,48,128,48c-24.30053,0-44,16.11775-44,36a32.40178,32.40178,0,0,0,2.00532,12.00253",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("path", {
        d: "M153.03855,127.9992C171.72987,135.814,184,146.83949,184,164c0,28-25.072,44-56,44-25.63327,0-47.244-13.53195-53.892-32",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }));

    case "thin":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "40",
        y1: "128",
        x2: "216",
        y2: "128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("path", {
        d: "M171.73144,79.99989C169.29943,62.00014,150.648,48,128,48c-24.30053,0-44,16.11775-44,36a32.40178,32.40178,0,0,0,2.00532,12.00253",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("path", {
        d: "M153.03855,127.9992C171.72987,135.814,184,146.83949,184,164c0,28-25.072,44-56,44-25.63327,0-47.244-13.53195-53.892-32",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }));

    case "regular":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "40",
        y1: "128",
        x2: "216",
        y2: "128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("path", {
        d: "M171.73144,79.99989C169.29943,62.00014,150.648,48,128,48c-24.30053,0-44,16.11775-44,36a32.40178,32.40178,0,0,0,2.00532,12.00253",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("path", {
        d: "M153.03855,127.9992C171.72987,135.814,184,146.83949,184,164c0,28-25.072,44-56,44-25.63327,0-47.244-13.53195-53.892-32",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }));

    default:
      console.error('Unsupported icon weight. Choose from "thin", "light", "regular", "bold", "fill", or "duotone".');
      return null;
  }
};

var TextStrikethrough = /*#__PURE__*/forwardRef(function (props, ref) {
  var color = props.color,
      size = props.size,
      weight = props.weight,
      mirrored = props.mirrored,
      children = props.children,
      restProps = _objectWithoutPropertiesLoose(props, ["color", "size", "weight", "mirrored", "children"]);

  var _useContext = useContext(IconContext),
      contextColor = _useContext.color,
      contextSize = _useContext.size,
      contextWeight = _useContext.weight,
      contextMirrored = _useContext.mirrored,
      restContext = _objectWithoutPropertiesLoose(_useContext, ["color", "size", "weight", "mirrored"]);

  return React.createElement("svg", Object.assign({
    ref: ref,
    xmlns: "http://www.w3.org/2000/svg",
    width: size != null ? size : contextSize,
    height: size != null ? size : contextSize,
    fill: color != null ? color : contextColor,
    viewBox: "0 0 256 256",
    transform: mirrored || contextMirrored ? "scale(-1, 1)" : undefined
  }, restContext, restProps), children, React.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), renderPathFor(weight != null ? weight : contextWeight, color != null ? color : contextColor));
});
TextStrikethrough.displayName = "TextStrikethrough";

export default TextStrikethrough;
//# sourceMappingURL=TextStrikethrough.esm.js.map
