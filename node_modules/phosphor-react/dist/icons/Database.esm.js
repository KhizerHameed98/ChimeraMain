import React, { forwardRef, useContext } from 'react';
import { IconContext } from '../lib/index.esm.js';
import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';

var renderPathFor = function renderPathFor(weight, color) {
  switch (weight) {
    case "bold":
      return React.createElement(React.Fragment, null, React.createElement("ellipse", {
        cx: "128",
        cy: "80",
        rx: "88",
        ry: "48",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("path", {
        d: "M40,80v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V80",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("path", {
        d: "M40,128v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }));

    case "duotone":
      return React.createElement(React.Fragment, null, React.createElement("ellipse", {
        cx: "128",
        cy: "80",
        rx: "88",
        ry: "48",
        opacity: "0.2"
      }), React.createElement("ellipse", {
        cx: "128",
        cy: "80",
        rx: "88",
        ry: "48",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("path", {
        d: "M40,80v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V80",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("path", {
        d: "M40,128v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }));

    case "fill":
      return React.createElement(React.Fragment, null, React.createElement("path", {
        d: "M128,24C74.168,24,32,48.59814,32,80v96c0,31.40186,42.168,56,96,56s96-24.59814,96-56V80C224,48.59814,181.832,24,128,24Zm80,104c0,9.61719-7.875,19.42871-21.60547,26.918C170.92822,163.354,150.18994,168,128,168s-42.92822-4.646-58.39453-13.082C55.875,147.42871,48,137.61719,48,128V111.35645C65.05994,126.3208,94.234,136,128,136s62.94006-9.6792,80-24.64355Zm-21.60547,74.918C170.92822,211.354,150.19043,216,128,216s-42.92822-4.646-58.39453-13.082C55.875,195.42871,48,185.61719,48,176V159.35645C65.05994,174.3208,94.234,184,128,184s62.94006-9.6792,80-24.64355V176C208,185.61719,200.125,195.42871,186.39453,202.918Z"
      }));

    case "light":
      return React.createElement(React.Fragment, null, React.createElement("ellipse", {
        cx: "128",
        cy: "80",
        rx: "88",
        ry: "48",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("path", {
        d: "M40,80v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V80",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("path", {
        d: "M40,128v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }));

    case "thin":
      return React.createElement(React.Fragment, null, React.createElement("ellipse", {
        cx: "128",
        cy: "80",
        rx: "88",
        ry: "48",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("path", {
        d: "M40,80v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V80",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("path", {
        d: "M40,128v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }));

    case "regular":
      return React.createElement(React.Fragment, null, React.createElement("ellipse", {
        cx: "128",
        cy: "80",
        rx: "88",
        ry: "48",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("path", {
        d: "M40,80v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V80",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("path", {
        d: "M40,128v48c0,26.50967,39.39894,48,88,48s88-21.49033,88-48V128",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }));

    default:
      console.error('Unsupported icon weight. Choose from "thin", "light", "regular", "bold", "fill", or "duotone".');
      return null;
  }
};

var Database = /*#__PURE__*/forwardRef(function (props, ref) {
  var color = props.color,
      size = props.size,
      weight = props.weight,
      mirrored = props.mirrored,
      children = props.children,
      restProps = _objectWithoutPropertiesLoose(props, ["color", "size", "weight", "mirrored", "children"]);

  var _useContext = useContext(IconContext),
      contextColor = _useContext.color,
      contextSize = _useContext.size,
      contextWeight = _useContext.weight,
      contextMirrored = _useContext.mirrored,
      restContext = _objectWithoutPropertiesLoose(_useContext, ["color", "size", "weight", "mirrored"]);

  return React.createElement("svg", Object.assign({
    ref: ref,
    xmlns: "http://www.w3.org/2000/svg",
    width: size != null ? size : contextSize,
    height: size != null ? size : contextSize,
    fill: color != null ? color : contextColor,
    viewBox: "0 0 256 256",
    transform: mirrored || contextMirrored ? "scale(-1, 1)" : undefined
  }, restContext, restProps), children, React.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), renderPathFor(weight != null ? weight : contextWeight, color != null ? color : contextColor));
});
Database.displayName = "Database";

export default Database;
//# sourceMappingURL=Database.esm.js.map
