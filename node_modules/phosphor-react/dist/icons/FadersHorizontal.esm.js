import React, { forwardRef, useContext } from 'react';
import { IconContext } from '../lib/index.esm.js';
import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';

var renderPathFor = function renderPathFor(weight, color) {
  switch (weight) {
    case "bold":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "131.99902",
        y1: "171.99304",
        x2: "39.99902",
        y2: "171.99317",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "171.99317",
        x2: "171.99902",
        y2: "171.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("line", {
        x1: "67.99902",
        y1: "83.99304",
        x2: "39.99902",
        y2: "83.99246",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "83.99246",
        x2: "107.99902",
        y2: "83.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("line", {
        x1: "107.99902",
        y1: "59.99304",
        x2: "107.99902",
        y2: "107.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }), React.createElement("line", {
        x1: "171.99902",
        y1: "195.99304",
        x2: "171.99902",
        y2: "147.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "24"
      }));

    case "duotone":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "135.99902",
        y1: "171.99304",
        x2: "39.99902",
        y2: "171.99317",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "171.99317",
        x2: "167.99902",
        y2: "171.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "71.99902",
        y1: "83.99304",
        x2: "39.99902",
        y2: "83.99246",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "83.99246",
        x2: "103.99902",
        y2: "83.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "103.99902",
        y1: "59.99304",
        x2: "103.99902",
        y2: "107.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "167.99902",
        y1: "195.99304",
        x2: "167.99902",
        y2: "147.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }));

    case "fill":
      return React.createElement(React.Fragment, null, React.createElement("g", null, React.createElement("path", {
        d: "M135.999,163.99353h-96a8,8,0,0,0,0,16h96a8,8,0,0,0,0-16Z"
      }), React.createElement("path", {
        d: "M215.999,163.99353h-40v-16a8,8,0,0,0-16,0v48a8,8,0,0,0,16,0v-16h40a8,8,0,0,0,0-16Z"
      }), React.createElement("path", {
        d: "M39.999,91.99255l32,.001a8,8,0,0,0,0-16l-32-.001a8,8,0,0,0,0,16Z"
      }), React.createElement("path", {
        d: "M103.999,115.99353a8.00039,8.00039,0,0,0,8-8v-16l104-.001a8,8,0,1,0,0-16l-104,.001v-16a8,8,0,1,0-16,0v48A8.00039,8.00039,0,0,0,103.999,115.99353Z"
      })));

    case "light":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "135.99902",
        y1: "171.99304",
        x2: "39.99902",
        y2: "171.99317",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "171.99317",
        x2: "167.99902",
        y2: "171.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("line", {
        x1: "71.99902",
        y1: "83.99304",
        x2: "39.99902",
        y2: "83.99246",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "83.99246",
        x2: "103.99902",
        y2: "83.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("line", {
        x1: "103.99902",
        y1: "59.99304",
        x2: "103.99902",
        y2: "107.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }), React.createElement("line", {
        x1: "167.99902",
        y1: "195.99304",
        x2: "167.99902",
        y2: "147.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "12"
      }));

    case "thin":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "135.99902",
        y1: "171.99304",
        x2: "39.99902",
        y2: "171.99317",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "171.99317",
        x2: "167.99902",
        y2: "171.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("line", {
        x1: "71.99902",
        y1: "83.99304",
        x2: "39.99902",
        y2: "83.99246",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "83.99246",
        x2: "103.99902",
        y2: "83.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("line", {
        x1: "103.99902",
        y1: "59.99304",
        x2: "103.99902",
        y2: "107.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }), React.createElement("line", {
        x1: "167.99902",
        y1: "195.99304",
        x2: "167.99902",
        y2: "147.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "8"
      }));

    case "regular":
      return React.createElement(React.Fragment, null, React.createElement("line", {
        x1: "135.99902",
        y1: "171.99304",
        x2: "39.99902",
        y2: "171.99317",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "171.99317",
        x2: "167.99902",
        y2: "171.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "71.99902",
        y1: "83.99304",
        x2: "39.99902",
        y2: "83.99246",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "215.99902",
        y1: "83.99246",
        x2: "103.99902",
        y2: "83.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "103.99902",
        y1: "59.99304",
        x2: "103.99902",
        y2: "107.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }), React.createElement("line", {
        x1: "167.99902",
        y1: "195.99304",
        x2: "167.99902",
        y2: "147.99304",
        fill: "none",
        stroke: color,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "16"
      }));

    default:
      console.error('Unsupported icon weight. Choose from "thin", "light", "regular", "bold", "fill", or "duotone".');
      return null;
  }
};

var FadersHorizontal = /*#__PURE__*/forwardRef(function (props, ref) {
  var color = props.color,
      size = props.size,
      weight = props.weight,
      mirrored = props.mirrored,
      children = props.children,
      restProps = _objectWithoutPropertiesLoose(props, ["color", "size", "weight", "mirrored", "children"]);

  var _useContext = useContext(IconContext),
      contextColor = _useContext.color,
      contextSize = _useContext.size,
      contextWeight = _useContext.weight,
      contextMirrored = _useContext.mirrored,
      restContext = _objectWithoutPropertiesLoose(_useContext, ["color", "size", "weight", "mirrored"]);

  return React.createElement("svg", Object.assign({
    ref: ref,
    xmlns: "http://www.w3.org/2000/svg",
    width: size != null ? size : contextSize,
    height: size != null ? size : contextSize,
    fill: color != null ? color : contextColor,
    viewBox: "0 0 256 256",
    transform: mirrored || contextMirrored ? "scale(-1, 1)" : undefined
  }, restContext, restProps), children, React.createElement("rect", {
    width: "256",
    height: "256",
    fill: "none"
  }), renderPathFor(weight != null ? weight : contextWeight, color != null ? color : contextColor));
});
FadersHorizontal.displayName = "FadersHorizontal";

export default FadersHorizontal;
//# sourceMappingURL=FadersHorizontal.esm.js.map
