{"version":3,"file":"Monitor.esm.js","sources":["../../src/icons/Monitor.tsx"],"sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef, useContext } from \"react\";\nimport { IconProps, IconContext } from \"../lib\";\n\nconst renderPathFor = (\n  weight: string,\n  color: string\n): React.ReactNode | null => {\n  switch (weight) {\n    case \"bold\":\n      return (\n        <>\n          <rect\n            x=\"32\"\n            y=\"48\"\n            width=\"192\"\n            height=\"144\"\n            rx=\"16\"\n            transform=\"translate(256 240) rotate(180)\"\n            strokeWidth=\"24\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            fill=\"none\"\n          />\n          <line\n            x1=\"160\"\n            y1=\"228\"\n            x2=\"96\"\n            y2=\"228\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"24\"\n          />\n        </>\n      );\n    case \"duotone\":\n      return (\n        <>\n          <rect\n            x=\"32\"\n            y=\"48\"\n            width=\"192\"\n            height=\"144\"\n            rx=\"16\"\n            transform=\"translate(256 240) rotate(180)\"\n            opacity=\"0.2\"\n          />\n          <rect\n            x=\"32\"\n            y=\"48\"\n            width=\"192\"\n            height=\"144\"\n            rx=\"16\"\n            transform=\"translate(256 240) rotate(180)\"\n            strokeWidth=\"16\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            fill=\"none\"\n          />\n          <line\n            x1=\"160\"\n            y1=\"224\"\n            x2=\"96\"\n            y2=\"224\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n        </>\n      );\n    case \"fill\":\n      return (\n        <>\n          <g>\n            <rect x=\"24\" y=\"40.0002\" width=\"208\" height=\"160\" rx=\"24\" />\n            <path d=\"M160,216.0002H96a8,8,0,0,0,0,16h64a8,8,0,0,0,0-16Z\" />\n          </g>\n        </>\n      );\n    case \"light\":\n      return (\n        <>\n          <rect\n            x=\"32\"\n            y=\"48\"\n            width=\"192\"\n            height=\"144\"\n            rx=\"16\"\n            transform=\"translate(256 240) rotate(180)\"\n            strokeWidth=\"12\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            fill=\"none\"\n          />\n          <line\n            x1=\"160\"\n            y1=\"224\"\n            x2=\"96\"\n            y2=\"224\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"12\"\n          />\n        </>\n      );\n    case \"thin\":\n      return (\n        <>\n          <rect\n            x=\"32\"\n            y=\"48\"\n            width=\"192\"\n            height=\"144\"\n            rx=\"16\"\n            transform=\"translate(256 240) rotate(180)\"\n            strokeWidth=\"8\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            fill=\"none\"\n          />\n          <line\n            x1=\"160\"\n            y1=\"224\"\n            x2=\"96\"\n            y2=\"224\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"8\"\n          />\n        </>\n      );\n    case \"regular\":\n      return (\n        <>\n          <rect\n            x=\"32\"\n            y=\"48\"\n            width=\"192\"\n            height=\"144\"\n            rx=\"16\"\n            transform=\"translate(256 240) rotate(180)\"\n            strokeWidth=\"16\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            fill=\"none\"\n          />\n          <line\n            x1=\"160\"\n            y1=\"224\"\n            x2=\"96\"\n            y2=\"224\"\n            fill=\"none\"\n            stroke={color}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"16\"\n          />\n        </>\n      );\n    default:\n      console.error(\n        'Unsupported icon weight. Choose from \"thin\", \"light\", \"regular\", \"bold\", \"fill\", or \"duotone\".'\n      );\n      return null;\n  }\n};\n\nconst Monitor = forwardRef<SVGSVGElement, IconProps>((props, ref) => {\n  const { color, size, weight, mirrored, children, ...restProps } = props;\n  const {\n    color: contextColor,\n    size: contextSize,\n    weight: contextWeight,\n    mirrored: contextMirrored,\n    ...restContext\n  } = useContext(IconContext);\n\n  return (\n    <svg\n      ref={ref}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size ?? contextSize}\n      height={size ?? contextSize}\n      fill={color ?? contextColor}\n      viewBox=\"0 0 256 256\"\n      transform={mirrored || contextMirrored ? \"scale(-1, 1)\" : undefined}\n      {...restContext}\n      {...restProps}\n    >\n      {children}\n      <rect width=\"256\" height=\"256\" fill=\"none\" />\n      {renderPathFor(weight ?? contextWeight, color ?? contextColor)}\n    </svg>\n  );\n});\n\nMonitor.displayName = \"Monitor\";\n\nexport default Monitor;\n"],"names":["renderPathFor","weight","color","React","x","y","width","height","rx","transform","strokeWidth","stroke","strokeLinecap","strokeLinejoin","fill","x1","y1","x2","y2","opacity","d","console","error","Monitor","forwardRef","props","ref","size","mirrored","children","restProps","useContext","IconContext","contextColor","contextSize","contextWeight","contextMirrored","restContext","xmlns","viewBox","undefined","displayName"],"mappings":"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"}